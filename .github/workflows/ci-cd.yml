name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: fabricagenerate

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          Generate/package-lock.json
          fabrica-backend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./Generate
      run: npm ci
    
    - name: Install backend dependencies
      working-directory: ./fabrica-backend
      run: npm ci
    
    - name: Run frontend linting
      working-directory: ./Generate
      run: npm run lint
    
    - name: Run backend linting
      working-directory: ./fabrica-backend
      run: npm run lint
    
    - name: Run frontend tests
      working-directory: ./Generate
      run: npm test
    
    - name: Run backend tests
      working-directory: ./fabrica-backend
      run: npm test
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./Generate/coverage/lcov.info,./fabrica-backend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 构建和推送 Docker 镜像
  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./Generate
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./fabrica-backend
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # 这里添加实际的部署脚本
        # 例如：SSH 到服务器，拉取新镜像，重启服务等
    
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # 添加健康检查脚本
    
    - name: Notify deployment
      run: |
        echo "Deployment completed successfully!"
        # 发送部署通知